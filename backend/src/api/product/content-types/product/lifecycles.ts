// ./src/api/product/content-types/product/lifecycles.ts

export default {
  /**
   * 1) beforeCreate
   *    - EÄŸer "ending_date" belirtilmemiÅŸse 10 gÃ¼n sonrasÄ±nÄ± atar.
   */
  async beforeCreate(event: any) {
    const { data } = event.params;
    if (!data.ending_date) {
      const newDate = new Date();
      newDate.setDate(newDate.getDate() + 10);
      data.ending_date = newDate.toISOString();
    }
  },

  /**
   * 2) afterUpdate
   *    - Otomatik olarak "lottery winner" belirler
   *    - Åžartlar:
   *       a) lottery_product = true
   *       b) manual_lottery = false (otomatik Ã§ekiliÅŸ devrede)
   *       c) ending_date geÃ§miÅŸ (ÅŸu andan Ã¶nce)
   *       d) lottery_winner henÃ¼z atanmamÄ±ÅŸ
   *    - Rastgele "lottery_users" iÃ§inden birinin biduser.documentId'sini seÃ§ip "lottery_winner" alanÄ±na yazar
   */
  async afterUpdate(event: any) {
    const { result } = event; // GÃ¼ncellenen Product kaydÄ± (any)

    try {
      // 1) lottery_product = true mÃ¼?
      if (!result.lottery_product) return;

      // 2) manual_lottery = true ise otomatik Ã§ekiliÅŸ yapma
      if (result.manual_lottery) {
        console.log(`[afterUpdate] manual_lottery=true, otomatik Ã§ekiliÅŸ iptal. ÃœrÃ¼n: ${result.title}`);
        return;
      }

      // 3) ending_date geÃ§miÅŸ mi?
      const now = new Date();
      const productEndDate = new Date(result.ending_date || '');
      if (productEndDate > now) {
        // BitiÅŸ tarihi henÃ¼z geÃ§memiÅŸ
        return;
      }

      // 4) lottery_winner zaten var mÄ±?
      if (result.lottery_winner) {
        return;
      }

      // 5) "fresh" olarak Ã¼rÃ¼nÃ¼ tekrar Ã§ekiyoruz
      //    => Bu sayede "lottery_users" ve altÄ±ndaki "biduser" populate'lÄ± gelir
      const freshProduct: any = await strapi.entityService.findOne(
        'api::product.product',
        // Numeric ID kullanÄ±yorsanÄ±z "result.id":
        result.id,
        {
          // EÄŸer "documentId" bazlÄ± gÃ¼ncelleme yapÄ±yorsanÄ±z:
          // where: { documentId: result.documentId },
          populate: {
            lottery_users: {
              populate: 'biduser',
            },
          },
        }
      );

      // 6) lottery_users var mÄ±?
      if (!freshProduct?.lottery_users?.length) {
        console.warn('[afterUpdate] lottery_users boÅŸ veya undefined.');
        return;
      }

      // 7) Rastgele bir "lottery_user" seÃ§
      const randomIndex = Math.floor(Math.random() * freshProduct.lottery_users.length);
      const chosenLotteryUser = freshProduct.lottery_users[randomIndex];

      // 8) biduser.documentId var mÄ±?
      if (!chosenLotteryUser?.biduser?.documentId) {
        console.warn(`[afterUpdate] SeÃ§ilen lottery_user'da biduser veya documentId yok!`);
        return;
      }

      const winnerBidUserDocId = chosenLotteryUser.biduser.documentId;

      // 9) ÃœrÃ¼ne "lottery_winner" olarak atÄ±yoruz
      await strapi.entityService.update('api::product.product', result.id, {
        data: {
          lottery_winner: winnerBidUserDocId,
        },
      });

      console.log(
        `ðŸŽ‰ [afterUpdate] Otomatik Ã§ekiliÅŸ tamam! Kazanan => ${winnerBidUserDocId} (Product: ${freshProduct.title})`
      );

    } catch (err) {
      console.error('Lottery winner atama hatasÄ±:', err);
    }
  },
};
